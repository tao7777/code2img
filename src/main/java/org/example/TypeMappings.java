package org.example;

import com.google.common.collect.ImmutableMap;

import java.util.Map;

public class TypeMappings {
    public static int typeNum1 = 58;
    public static Map<Object, Object> type2Int1 = ImmutableMap.builder().put("UnknownType", 0).put("CompilationUnit", 1).put("ClassOrInterfaceDeclaration", 2).put("MethodDeclaration", 3).put("ConstructorDeclaration", 4).put("Parameter", 5).put("ClassOrInterfaceType", 6).put("BlockStmt", 7).put("ExpressionStmt", 8).put("IfStmt", 9).put("ReturnStmt", 10).put("VariableDeclarationExpr", 11).put("UnaryExpr", 12).put("BinaryExpr", 13).put("NameExpr", 14).put("VariableDeclarator", 15).put("InstanceOfExpr", 16).put("SwitchStmt", 17).put("AssignExpr", 18).put("MethodCallExpr", 19).put("FieldAccessExpr", 20).put("SwitchEntry", 21).put("EnclosedExpr", 22).put("CastExpr", 23).put("ObjectCreationExpr", 24).put("TypeParameter", 25).put("ArrayType", 26).put("TryStmt", 27).put("ForEachStmt", 28).put("CatchClause", 29).put("WildcardType", 30).put("MarkerAnnotationExpr", 31).put("ArrayCreationExpr", 32).put("WhileStmt", 33).put("ThrowStmt", 34).put("ArrayCreationLevel", 35).put("ForStmt", 36).put("ArrayAccessExpr", 37).put("ClassExpr", 38).put("DoStmt", 39).put("ArrayInitializerExpr", 40).put("ExplicitConstructorInvocationStmt", 41).put("ConditionalExpr", 42).put("SingleMemberAnnotationExpr", 43).put("FieldDeclaration", 44).put("SynchronizedStmt", 45).put("AssertStmt", 46).put("InitializerDeclaration", 47).put("ThisExpr", 48).put("LabeledStmt", 49).put("BreakStmt", 50).put("ContinueStmt", 51).put("LocalClassDeclarationStmt", 52).put("SuperExpr", 53).put("NormalAnnotationExpr", 54).put("MemberValuePair", 55).put("Name", 56).put("LambdaExpr", 57).build();

    public static int typeNum2 = 70;
    public static Map<Object, Object> type2Int2 = ImmutableMap.builder().put("UnknownType", 0).put("CompilationUnit", 1).put("ClassOrInterfaceDeclaration", 2).put("MethodDeclaration", 3).put("ConstructorDeclaration", 4).put("Parameter", 5).put("ClassOrInterfaceType", 6).put("BlockStmt", 7).put("ExpressionStmt", 8).put("IfStmt", 9).put("ReturnStmt", 10).put("VariableDeclarationExpr", 11).put("UnaryExpr", 12).put("BinaryExpr", 13).put("NameExpr", 14).put("VariableDeclarator", 15).put("InstanceOfExpr", 16).put("SwitchStmt", 17).put("AssignExpr", 18).put("MethodCallExpr", 19).put("FieldAccessExpr", 20).put("SwitchEntry", 21).put("EnclosedExpr", 22).put("CastExpr", 23).put("ObjectCreationExpr", 24).put("TypeParameter", 25).put("ArrayType", 26).put("TryStmt", 27).put("ForEachStmt", 28).put("CatchClause", 29).put("WildcardType", 30).put("MarkerAnnotationExpr", 31).put("ArrayCreationExpr", 32).put("WhileStmt", 33).put("ThrowStmt", 34).put("ArrayCreationLevel", 35).put("ForStmt", 36).put("ArrayAccessExpr", 37).put("ClassExpr", 38).put("DoStmt", 39).put("ArrayInitializerExpr", 40).put("ExplicitConstructorInvocationStmt", 41).put("ConditionalExpr", 42).put("SingleMemberAnnotationExpr", 43).put("FieldDeclaration", 44).put("SynchronizedStmt", 45).put("AssertStmt", 46).put("InitializerDeclaration", 47).put("ThisExpr", 48).put("LabeledStmt", 49).put("BreakStmt", 50).put("ContinueStmt", 51).put("LocalClassDeclarationStmt", 52).put("SuperExpr", 53).put("NormalAnnotationExpr", 54).put("MemberValuePair", 55).put("Name", 56).put("LambdaExpr", 57).put("SimpleName", 58).put("Modifier", 59).put("PrimitiveType", 60).put("IntegerLiteralExpr", 61).put("NullLiteralExpr", 62).put("VoidType", 63).put("StringLiteralExpr", 64).put("BooleanLiteralExpr", 65).put("DoubleLiteralExpr", 66).put("CharLiteralExpr", 67).put("LongLiteralExpr", 68).put("EmptyStmt", 69).build();

    public static int edgeTypeNum = 673;

    public static Map<Object, Object> edgeType2Num = ImmutableMap.builder().put("LabeledStmtIfStmt", 1).put("ArrayInitializerExprArrayCreationExpr", 2).put("ClassOrInterfaceTypeWildcardType", 3).put("ConditionalExprArrayAccessExpr", 4).put("NameExprSimpleName", 5).put("SwitchEntryEnclosedExpr", 6).put("ForEachStmtVariableDeclarationExpr", 7).put("ForStmtVariableDeclarationExpr", 8).put("ConstructorDeclarationModifier", 9).put("FieldAccessExprSuperExpr", 10).put("WhileStmtFieldAccessExpr", 11).put("AssignExprConditionalExpr", 12).put("ReturnStmtEnclosedExpr", 13).put("ArrayInitializerExprClassExpr", 14).put("LabeledStmtLabeledStmt", 15).put("SwitchStmtBinaryExpr", 16).put("ReturnStmtStringLiteralExpr", 17).put("LabeledStmtBlockStmt", 18).put("MethodCallExprIntegerLiteralExpr", 19).put("AssignExprBooleanLiteralExpr", 20).put("ConditionalExprCharLiteralExpr", 21).put("WhileStmtForStmt", 22).put("ClassOrInterfaceTypeClassOrInterfaceType", 23).put("ForEachStmtAssertStmt", 24).put("AssignExprDoubleLiteralExpr", 25).put("CastExprNullLiteralExpr", 26).put("ForStmtConditionalExpr", 27).put("MethodCallExprFieldAccessExpr", 28).put("ExplicitConstructorInvocationStmtNullLiteralExpr", 29).put("ReturnStmtUnaryExpr", 30).put("FieldDeclarationSingleMemberAnnotationExpr", 31).put("SynchronizedStmtMethodCallExpr", 32).put("UnaryExprLongLiteralExpr", 33).put("ArrayInitializerExprThisExpr", 34).put("SwitchStmtArrayAccessExpr", 35).put("BinaryExprArrayAccessExpr", 36).put("EnclosedExprCharLiteralExpr", 37).put("ClassOrInterfaceDeclarationClassOrInterfaceType", 38).put("SwitchStmtConditionalExpr", 39).put("DoStmtExpressionStmt", 40).put("WhileStmtEnclosedExpr", 41).put("BlockStmtIfStmt", 42).put("ArrayCreationExprClassOrInterfaceType", 43).put("MethodDeclarationSimpleName", 44).put("AssignExprAssignExpr", 45).put("BlockStmtForEachStmt", 46).put("ArrayCreationLevelFieldAccessExpr", 47).put("InstanceOfExprCastExpr", 48).put("BlockStmtForStmt", 49).put("ParameterMarkerAnnotationExpr", 50).put("ConditionalExprArrayCreationExpr", 51).put("VariableDeclaratorClassOrInterfaceType", 52).put("AssertStmtBooleanLiteralExpr", 53).put("FieldAccessExprThisExpr", 54).put("ReturnStmtNameExpr", 55).put("VariableDeclaratorThisExpr", 56).put("CastExprBooleanLiteralExpr", 57).put("ArrayCreationLevelCastExpr", 58).put("AssertStmtCastExpr", 59).put("ExplicitConstructorInvocationStmtDoubleLiteralExpr", 60).put("IfStmtForStmt", 61).put("SwitchEntryContinueStmt", 62).put("ClassOrInterfaceDeclarationClassOrInterfaceDeclaration", 63).put("TypeParameterSimpleName", 64).put("SwitchEntryThrowStmt", 65).put("ArrayCreationLevelCharLiteralExpr", 66).put("ForEachStmtObjectCreationExpr", 67).put("WhileStmtArrayAccessExpr", 68).put("ArrayInitializerExprAssignExpr", 69).put("VariableDeclaratorIntegerLiteralExpr", 70).put("EnclosedExprFieldAccessExpr", 71).put("ArrayCreationLevelArrayAccessExpr", 72).put("ThrowStmtNullLiteralExpr", 73).put("ArrayInitializerExprMethodCallExpr", 74).put("EnclosedExprClassExpr", 75).put("WhileStmtBooleanLiteralExpr", 76).put("ConditionalExprCastExpr", 77).put("CastExprLambdaExpr", 78).put("EnclosedExprBooleanLiteralExpr", 79).put("MethodCallExprArrayAccessExpr", 80).put("LabeledStmtContinueStmt", 81).put("ConditionalExprFieldAccessExpr", 82).put("IfStmtAssignExpr", 83).put("EnclosedExprArrayAccessExpr", 84).put("InstanceOfExprMethodCallExpr", 85).put("ForStmtObjectCreationExpr", 86).put("ObjectCreationExprInitializerDeclaration", 87).put("BinaryExprObjectCreationExpr", 88).put("WhileStmtBreakStmt", 89).put("MethodCallExprNullLiteralExpr", 90).put("ReturnStmtBooleanLiteralExpr", 91).put("ForStmtInstanceOfExpr", 92).put("ForStmtForEachStmt", 93).put("ExpressionStmtMethodCallExpr", 94).put("CastExprPrimitiveType", 95).put("ObjectCreationExprInstanceOfExpr", 96).put("IfStmtThrowStmt", 97).put("SwitchEntryBlockStmt", 98).put("EnclosedExprEnclosedExpr", 99).put("DoStmtNameExpr", 100).put("BinaryExprFieldAccessExpr", 101).put("SwitchStmtFieldAccessExpr", 102).put("ForEachStmtTryStmt", 103).put("UnaryExprFieldAccessExpr", 104).put("ThrowStmtCastExpr", 105).put("LabeledStmtDoStmt", 106).put("SwitchStmtUnaryExpr", 107).put("InitializerDeclarationBlockStmt", 108).put("SwitchStmtAssignExpr", 109).put("ArrayCreationLevelUnaryExpr", 110).put("MemberValuePairNameExpr", 111).put("ExpressionStmtAssignExpr", 112).put("DoStmtBlockStmt", 113).put("ForStmtBooleanLiteralExpr", 114).put("WhileStmtConditionalExpr", 115).put("IfStmtIfStmt", 116).put("ArrayAccessExprUnaryExpr", 117).put("AssignExprObjectCreationExpr", 118).put("ArrayTypeClassOrInterfaceType", 119).put("ExpressionStmtNameExpr", 120).put("ArrayCreationLevelConditionalExpr", 121).put("IfStmtAssertStmt", 122).put("ArrayInitializerExprDoubleLiteralExpr", 123).put("SingleMemberAnnotationExprNameExpr", 124).put("ReturnStmtThisExpr", 125).put("ThrowStmtFieldAccessExpr", 126).put("AssignExprArrayCreationExpr", 127).put("BlockStmtExplicitConstructorInvocationStmt", 128).put("ParameterSingleMemberAnnotationExpr", 129).put("WhileStmtContinueStmt", 130).put("MethodCallExprCharLiteralExpr", 131).put("AssignExprBinaryExpr", 132).put("CastExprNameExpr", 133).put("MethodCallExprSuperExpr", 134).put("CastExprLongLiteralExpr", 135).put("ObjectCreationExprClassExpr", 136).put("VariableDeclaratorArrayAccessExpr", 137).put("ForStmtUnaryExpr", 138).put("VariableDeclaratorSimpleName", 139).put("ObjectCreationExprCharLiteralExpr", 140).put("AssignExprInstanceOfExpr", 141).put("AssertStmtObjectCreationExpr", 142).put("UnaryExprMethodCallExpr", 143).put("WhileStmtInstanceOfExpr", 144).put("AssignExprArrayAccessExpr", 145).put("BlockStmtAssertStmt", 146).put("ForStmtTryStmt", 147).put("IfStmtDoStmt", 148).put("FieldAccessExprSimpleName", 149).put("ParameterSimpleName", 150).put("IfStmtInstanceOfExpr", 151).put("SwitchEntryWhileStmt", 152).put("ForStmtCastExpr", 153).put("MethodCallExprAssignExpr", 154).put("LabeledStmtBreakStmt", 155).put("SingleMemberAnnotationExprName", 156).put("ConstructorDeclarationClassOrInterfaceType", 157).put("WildcardTypeClassOrInterfaceType", 158).put("ConstructorDeclarationBlockStmt", 159).put("ArrayInitializerExprNullLiteralExpr", 160).put("SwitchEntryBreakStmt", 161).put("ReturnStmtConditionalExpr", 162).put("WhileStmtBlockStmt", 163).put("VariableDeclaratorInstanceOfExpr", 164).put("MethodCallExprCastExpr", 165).put("ConditionalExprConditionalExpr", 166).put("ArrayAccessExprObjectCreationExpr", 167).put("ThrowStmtObjectCreationExpr", 168).put("ClassExprClassOrInterfaceType", 169).put("IfStmtBinaryExpr", 170).put("LabeledStmtWhileStmt", 171).put("BinaryExprCharLiteralExpr", 172).put("ConditionalExprLongLiteralExpr", 173).put("InstanceOfExprFieldAccessExpr", 174).put("VariableDeclaratorAssignExpr", 175).put("CastExprClassExpr", 176).put("AssertStmtFieldAccessExpr", 177).put("VariableDeclaratorPrimitiveType", 178).put("IfStmtUnaryExpr", 179).put("LabeledStmtAssertStmt", 180).put("BinaryExprNullLiteralExpr", 181).put("ObjectCreationExprNameExpr", 182).put("ThrowStmtMethodCallExpr", 183).put("ClassOrInterfaceDeclarationModifier", 184).put("ForEachStmtExpressionStmt", 185).put("ForStmtForStmt", 186).put("VariableDeclarationExprVariableDeclarator", 187).put("SynchronizedStmtArrayAccessExpr", 188).put("SynchronizedStmtObjectCreationExpr", 189).put("MemberValuePairArrayInitializerExpr", 190).put("UnaryExprCastExpr", 191).put("VariableDeclaratorFieldAccessExpr", 192).put("SwitchStmtThisExpr", 193).put("ExplicitConstructorInvocationStmtArrayAccessExpr", 194).put("ConstructorDeclarationSimpleName", 195).put("WhileStmtBinaryExpr", 196).put("ArrayInitializerExprCastExpr", 197).put("FieldAccessExprMethodCallExpr", 198).put("LocalClassDeclarationStmtClassOrInterfaceDeclaration", 199).put("ArrayCreationLevelEnclosedExpr", 200).put("MethodCallExprStringLiteralExpr", 201).put("LabeledStmtReturnStmt", 202).put("EnclosedExprUnaryExpr", 203).put("InstanceOfExprClassOrInterfaceType", 204).put("ExplicitConstructorInvocationStmtCastExpr", 205).put("SwitchStmtEnclosedExpr", 206).put("ArrayAccessExprEnclosedExpr", 207).put("AssignExprLongLiteralExpr", 208).put("ForEachStmtMethodCallExpr", 209).put("BlockStmtSwitchStmt", 210).put("UnaryExprCharLiteralExpr", 211).put("ForEachStmtSynchronizedStmt", 212).put("ExplicitConstructorInvocationStmtBooleanLiteralExpr", 213).put("AssignExprNameExpr", 214).put("TryStmtBlockStmt", 215).put("LambdaExprBlockStmt", 216).put("EnclosedExprObjectCreationExpr", 217).put("ArrayInitializerExprNameExpr", 218).put("ExplicitConstructorInvocationStmtArrayCreationExpr", 219).put("LabeledStmtSwitchStmt", 220).put("ArrayAccessExprBinaryExpr", 221).put("ExplicitConstructorInvocationStmtIntegerLiteralExpr", 222).put("DoStmtBooleanLiteralExpr", 223).put("MethodCallExprInstanceOfExpr", 224).put("FieldDeclarationVariableDeclarator", 225).put("VariableDeclaratorMethodCallExpr", 226).put("SwitchEntryStringLiteralExpr", 227).put("ReturnStmtArrayAccessExpr", 228).put("NormalAnnotationExprName", 229).put("LabeledStmtThrowStmt", 230).put("AssignExprEnclosedExpr", 231).put("BinaryExprUnaryExpr", 232).put("BinaryExprInstanceOfExpr", 233).put("ThrowStmtArrayAccessExpr", 234).put("EnclosedExprNullLiteralExpr", 235).put("ConditionalExprNullLiteralExpr", 236).put("InstanceOfExprArrayAccessExpr", 237).put("SwitchEntryForStmt", 238).put("VariableDeclaratorCharLiteralExpr", 239).put("MethodCallExprBinaryExpr", 240).put("UnaryExprBooleanLiteralExpr", 241).put("FieldAccessExprArrayAccessExpr", 242).put("ExplicitConstructorInvocationStmtFieldAccessExpr", 243).put("AssertStmtMethodCallExpr", 244).put("AssertStmtAssignExpr", 245).put("ForEachStmtForStmt", 246).put("MethodDeclarationModifier", 247).put("IfStmtCastExpr", 248).put("InstanceOfExprObjectCreationExpr", 249).put("ObjectCreationExprDoubleLiteralExpr", 250).put("ObjectCreationExprCastExpr", 251).put("ForEachStmtCastExpr", 252).put("SwitchEntryAssertStmt", 253).put("ClassOrInterfaceDeclarationNormalAnnotationExpr", 254).put("SwitchEntryReturnStmt", 255).put("IfStmtForEachStmt", 256).put("VariableDeclaratorCastExpr", 257).put("ObjectCreationExprConditionalExpr", 258).put("ClassOrInterfaceDeclarationFieldDeclaration", 259).put("ForEachStmtLabeledStmt", 260).put("UnaryExprIntegerLiteralExpr", 261).put("ArrayAccessExprAssignExpr", 262).put("BlockStmtBlockStmt", 263).put("ForEachStmtNameExpr", 264).put("SwitchEntryForEachStmt", 265).put("CastExprFieldAccessExpr", 266).put("AssertStmtUnaryExpr", 267).put("CastExprStringLiteralExpr", 268).put("VariableDeclarationExprMarkerAnnotationExpr", 269).put("ObjectCreationExprLongLiteralExpr", 270).put("ArrayCreationLevelBinaryExpr", 271).put("SingleMemberAnnotationExprArrayInitializerExpr", 272).put("AssignExprCastExpr", 273).put("ForEachStmtIfStmt", 274).put("ExplicitConstructorInvocationStmtNameExpr", 275).put("EnclosedExprDoubleLiteralExpr", 276).put("SynchronizedStmtStringLiteralExpr", 277).put("InstanceOfExprArrayType", 278).put("ConditionalExprMethodCallExpr", 279).put("SwitchEntryBinaryExpr", 280).put("FieldDeclarationModifier", 281).put("BlockStmtWhileStmt", 282).put("VariableDeclarationExprNormalAnnotationExpr", 283).put("AssertStmtStringLiteralExpr", 284).put("BlockStmtDoStmt", 285).put("BlockStmtSynchronizedStmt", 286).put("ArrayCreationExprArrayInitializerExpr", 287).put("IfStmtObjectCreationExpr", 288).put("ConditionalExprStringLiteralExpr", 289).put("ArrayCreationExprArrayCreationLevel", 290).put("MemberValuePairClassExpr", 291).put("MethodDeclarationArrayType", 292).put("BlockStmtLabeledStmt", 293).put("ObjectCreationExprNullLiteralExpr", 294).put("WhileStmtAssignExpr", 295).put("ArrayInitializerExprCharLiteralExpr", 296).put("ObjectCreationExprMethodCallExpr", 297).put("BinaryExprStringLiteralExpr", 298).put("WhileStmtExpressionStmt", 299).put("ForEachStmtReturnStmt", 300).put("SwitchEntryDoStmt", 301).put("DoStmtTryStmt", 302).put("ConstructorDeclarationTypeParameter", 303).put("InstanceOfExprEnclosedExpr", 304).put("MethodDeclarationParameter", 305).put("ArrayCreationLevelAssignExpr", 306).put("BinaryExprLongLiteralExpr", 307).put("ForEachStmtAssignExpr", 308).put("MethodCallExprThisExpr", 309).put("IfStmtWhileStmt", 310).put("DoStmtIfStmt", 311).put("ArrayInitializerExprInstanceOfExpr", 312).put("IfStmtEmptyStmt", 313).put("IfStmtBlockStmt", 314).put("EnclosedExprConditionalExpr", 315).put("MethodCallExprConditionalExpr", 316).put("ThrowStmtThisExpr", 317).put("ArrayInitializerExprBinaryExpr", 318).put("SynchronizedStmtNameExpr", 319).put("WhileStmtLabeledStmt", 320).put("MethodCallExprLongLiteralExpr", 321).put("CatchClauseBlockStmt", 322).put("AssertStmtEnclosedExpr", 323).put("VariableDeclaratorBinaryExpr", 324).put("SwitchStmtObjectCreationExpr", 325).put("ObjectCreationExprObjectCreationExpr", 326).put("ArrayInitializerExprFieldAccessExpr", 327).put("SwitchStmtCastExpr", 328).put("MemberValuePairSimpleName", 329).put("ClassExprVoidType", 330).put("EnclosedExprLongLiteralExpr", 331).put("IfStmtSynchronizedStmt", 332).put("ObjectCreationExprClassOrInterfaceDeclaration", 333).put("AssertStmtBinaryExpr", 334).put("ArrayCreationLevelMethodCallExpr", 335).put("WhileStmtSwitchStmt", 336).put("BlockStmtLocalClassDeclarationStmt", 337).put("CastExprCharLiteralExpr", 338).put("SynchronizedStmtFieldAccessExpr", 339).put("BinaryExprNameExpr", 340).put("MemberValuePairEnclosedExpr", 341).put("LabeledStmtForStmt", 342).put("EnclosedExprThisExpr", 343).put("ForStmtIfStmt", 344).put("ArrayAccessExprConditionalExpr", 345).put("WhileStmtNameExpr", 346).put("EnclosedExprArrayCreationExpr", 347).put("ObjectCreationExprFieldDeclaration", 348).put("CastExprClassOrInterfaceType", 349).put("BinaryExprArrayCreationExpr", 350).put("AssignExprStringLiteralExpr", 351).put("CastExprCastExpr", 352).put("IfStmtBooleanLiteralExpr", 353).put("MethodDeclarationClassOrInterfaceType", 354).put("ExpressionStmtUnaryExpr", 355).put("AssignExprMethodCallExpr", 356).put("ExplicitConstructorInvocationStmtAssignExpr", 357).put("ReturnStmtDoubleLiteralExpr", 358).put("ParameterPrimitiveType", 359).put("AssertStmtNameExpr", 360).put("BlockStmtBreakStmt", 361).put("ConditionalExprNameExpr", 362).put("IfStmtTryStmt", 363).put("SwitchEntryCharLiteralExpr", 364).put("CastExprUnaryExpr", 365).put("ArrayCreationExprPrimitiveType", 366).put("InstanceOfExprNameExpr", 367).put("UnaryExprUnaryExpr", 368).put("ObjectCreationExprArrayCreationExpr", 369).put("ForStmtWhileStmt", 370).put("DoStmtConditionalExpr", 371).put("DoStmtCastExpr", 372).put("UnaryExprDoubleLiteralExpr", 373).put("VariableDeclaratorBooleanLiteralExpr", 374).put("MethodDeclarationVoidType", 375).put("WhileStmtDoStmt", 376).put("ForEachStmtSwitchStmt", 377).put("BlockStmtTryStmt", 378).put("CastExprIntegerLiteralExpr", 379).put("BlockStmtThrowStmt", 380).put("ThrowStmtNameExpr", 381).put("IfStmtConditionalExpr", 382).put("ForStmtThrowStmt", 383).put("MethodDeclarationTypeParameter", 384).put("MethodCallExprUnaryExpr", 385).put("EnclosedExprMethodCallExpr", 386).put("VariableDeclaratorArrayType", 387).put("ArrayAccessExprMethodCallExpr", 388).put("ClassOrInterfaceDeclarationSimpleName", 389).put("ForEachStmtConditionalExpr", 390).put("AssignExprThisExpr", 391).put("EnclosedExprIntegerLiteralExpr", 392).put("VariableDeclaratorArrayCreationExpr", 393).put("MethodDeclarationPrimitiveType", 394).put("ForEachStmtBreakStmt", 395).put("ArrayAccessExprNameExpr", 396).put("NameName", 397).put("ForStmtDoStmt", 398).put("ReturnStmtNullLiteralExpr", 399).put("AssignExprUnaryExpr", 400).put("ArrayInitializerExprConditionalExpr", 401).put("ReturnStmtArrayCreationExpr", 402).put("VariableDeclaratorDoubleLiteralExpr", 403).put("InstanceOfExprNullLiteralExpr", 404).put("IfStmtEnclosedExpr", 405).put("ClassExprArrayType", 406).put("WhileStmtMethodCallExpr", 407).put("MethodCallExprSimpleName", 408).put("WhileStmtReturnStmt", 409).put("AssignExprIntegerLiteralExpr", 410).put("SwitchEntryIfStmt", 411).put("ForStmtLabeledStmt", 412).put("BlockStmtExpressionStmt", 413).put("ObjectCreationExprThisExpr", 414).put("ForEachStmtThisExpr", 415).put("ArrayTypeArrayType", 416).put("ConditionalExprUnaryExpr", 417).put("TypeParameterClassOrInterfaceType", 418).put("BlockStmtReturnStmt", 419).put("CastExprDoubleLiteralExpr", 420).put("IfStmtReturnStmt", 421).put("MemberValuePairFieldAccessExpr", 422).put("BinaryExprBinaryExpr", 423).put("UnaryExprEnclosedExpr", 424).put("ArrayInitializerExprStringLiteralExpr", 425).put("ConditionalExprInstanceOfExpr", 426).put("CastExprEnclosedExpr", 427).put("ArrayCreationLevelNameExpr", 428).put("EnclosedExprAssignExpr", 429).put("ForEachStmtArrayAccessExpr", 430).put("IfStmtNameExpr", 431).put("DoStmtArrayAccessExpr", 432).put("IfStmtArrayAccessExpr", 433).put("ForStmtEmptyStmt", 434).put("ExplicitConstructorInvocationStmtEnclosedExpr", 435).put("FieldAccessExprFieldAccessExpr", 436).put("AssertStmtConditionalExpr", 437).put("MethodCallExprMethodCallExpr", 438).put("ForStmtAssignExpr", 439).put("VariableDeclaratorNullLiteralExpr", 440).put("ArrayInitializerExprObjectCreationExpr", 441).put("WhileStmtIfStmt", 442).put("MethodCallExprArrayType", 443).put("WhileStmtSynchronizedStmt", 444).put("FieldAccessExprArrayCreationExpr", 445).put("ClassOrInterfaceDeclarationTypeParameter", 446).put("BinaryExprDoubleLiteralExpr", 447).put("ConstructorDeclarationParameter", 448).put("ArrayInitializerExprArrayInitializerExpr", 449).put("ParameterModifier", 450).put("DoStmtBinaryExpr", 451).put("VariableDeclaratorArrayInitializerExpr", 452).put("ThrowStmtEnclosedExpr", 453).put("ClassOrInterfaceDeclarationMarkerAnnotationExpr", 454).put("LabeledStmtEmptyStmt", 455).put("UnaryExprNameExpr", 456).put("ClassExprPrimitiveType", 457).put("WhileStmtCastExpr", 458).put("DoStmtLabeledStmt", 459).put("ConditionalExprIntegerLiteralExpr", 460).put("BinaryExprClassExpr", 461).put("CastExprThisExpr", 462).put("SwitchStmtIntegerLiteralExpr", 463).put("BinaryExprCastExpr", 464).put("VariableDeclaratorNameExpr", 465).put("MethodDeclarationNormalAnnotationExpr", 466).put("ConditionalExprEnclosedExpr", 467).put("SwitchEntryUnaryExpr", 468).put("AssignExprNullLiteralExpr", 469).put("WhileStmtEmptyStmt", 470).put("ParameterClassOrInterfaceType", 471).put("SwitchEntrySwitchStmt", 472).put("ConditionalExprBooleanLiteralExpr", 473).put("ExpressionStmtObjectCreationExpr", 474).put("ObjectCreationExprBooleanLiteralExpr", 475).put("MemberValuePairStringLiteralExpr", 476).put("SynchronizedStmtClassExpr", 477).put("DoStmtForEachStmt", 478).put("BlockStmtContinueStmt", 479).put("ArrayInitializerExprArrayAccessExpr", 480).put("ExplicitConstructorInvocationStmtBinaryExpr", 481).put("ForStmtBreakStmt", 482).put("ReturnStmtInstanceOfExpr", 483).put("LabeledStmtSimpleName", 484).put("DoStmtUnaryExpr", 485).put("ExplicitConstructorInvocationStmtCharLiteralExpr", 486).put("BreakStmtSimpleName", 487).put("WhileStmtTryStmt", 488).put("SwitchStmtNameExpr", 489).put("LabeledStmtSynchronizedStmt", 490).put("ReturnStmtIntegerLiteralExpr", 491).put("DoStmtMethodCallExpr", 492).put("ObjectCreationExprClassOrInterfaceType", 493).put("VariableDeclaratorObjectCreationExpr", 494).put("IfStmtContinueStmt", 495).put("MethodDeclarationSingleMemberAnnotationExpr", 496).put("ExplicitConstructorInvocationStmtMethodCallExpr", 497).put("EnclosedExprCastExpr", 498).put("ReturnStmtLongLiteralExpr", 499).put("MethodCallExprObjectCreationExpr", 500).put("DoStmtEnclosedExpr", 501).put("AssertStmtThisExpr", 502).put("DoStmtEmptyStmt", 503).put("BinaryExprThisExpr", 504).put("IfStmtExpressionStmt", 505).put("DoStmtInstanceOfExpr", 506).put("ForEachStmtEnclosedExpr", 507).put("DoStmtSwitchStmt", 508).put("ExpressionStmtVariableDeclarationExpr", 509).put("ReturnStmtClassExpr", 510).put("ReturnStmtBinaryExpr", 511).put("ClassOrInterfaceTypeSimpleName", 512).put("SynchronizedStmtBinaryExpr", 513).put("IfStmtSwitchStmt", 514).put("EnclosedExprInstanceOfExpr", 515).put("ReturnStmtObjectCreationExpr", 516).put("ThrowStmtConditionalExpr", 517).put("ArrayAccessExprIntegerLiteralExpr", 518).put("ArrayInitializerExprUnaryExpr", 519).put("MemberValuePairIntegerLiteralExpr", 520).put("ArrayInitializerExprLongLiteralExpr", 521).put("ObjectCreationExprFieldAccessExpr", 522).put("SwitchEntryNameExpr", 523).put("ForStmtSwitchStmt", 524).put("CastExprArrayCreationExpr", 525).put("ArrayAccessExprCharLiteralExpr", 526).put("ForStmtContinueStmt", 527).put("MethodCallExprDoubleLiteralExpr", 528).put("CastExprArrayAccessExpr", 529).put("TryStmtCatchClause", 530).put("IfStmtFieldAccessExpr", 531).put("SingleMemberAnnotationExprClassExpr", 532).put("MethodCallExprClassOrInterfaceType", 533).put("ForEachStmtEmptyStmt", 534).put("MemberValuePairNormalAnnotationExpr", 535).put("LabeledStmtExpressionStmt", 536).put("InstanceOfExprThisExpr", 537).put("FieldAccessExprNameExpr", 538).put("SingleMemberAnnotationExprIntegerLiteralExpr", 539).put("VariableDeclarationExprModifier", 540).put("ArrayAccessExprArrayCreationExpr", 541).put("ObjectCreationExprIntegerLiteralExpr", 542).put("FieldDeclarationNormalAnnotationExpr", 543).put("WildcardTypeArrayType", 544).put("ObjectCreationExprArrayAccessExpr", 545).put("ForStmtBlockStmt", 546).put("CastExprArrayType", 547).put("ArrayCreationLevelIntegerLiteralExpr", 548).put("ClassOrInterfaceDeclarationConstructorDeclaration", 549).put("ObjectCreationExprUnaryExpr", 550).put("VariableDeclaratorUnaryExpr", 551).put("SwitchEntrySynchronizedStmt", 552).put("ArrayAccessExprFieldAccessExpr", 553).put("IfStmtLabeledStmt", 554).put("SynchronizedStmtConditionalExpr", 555).put("MarkerAnnotationExprName", 556).put("ObjectCreationExprMethodDeclaration", 557).put("BinaryExprEnclosedExpr", 558).put("SwitchStmtSwitchEntry", 559).put("ThrowStmtAssignExpr", 560).put("SwitchEntryLabeledStmt", 561).put("FieldAccessExprEnclosedExpr", 562).put("SwitchEntryIntegerLiteralExpr", 563).put("ExplicitConstructorInvocationStmtUnaryExpr", 564).put("ReturnStmtMethodCallExpr", 565).put("CastExprObjectCreationExpr", 566).put("ForEachStmtForEachStmt", 567).put("ForEachStmtWhileStmt", 568).put("EnclosedExprBinaryExpr", 569).put("ParameterNormalAnnotationExpr", 570).put("ArrayInitializerExprNormalAnnotationExpr", 571).put("WhileStmtWhileStmt", 572).put("ConditionalExprThisExpr", 573).put("WhileStmtUnaryExpr", 574).put("ArrayAccessExprCastExpr", 575).put("ArrayAccessExprArrayAccessExpr", 576).put("ForStmtReturnStmt", 577).put("ForStmtMethodCallExpr", 578).put("SwitchEntryCastExpr", 579).put("ClassOrInterfaceTypeArrayType", 580).put("ReturnStmtFieldAccessExpr", 581).put("SwitchEntryTryStmt", 582).put("ForStmtAssertStmt", 583).put("ObjectCreationExprAssignExpr", 584).put("EnclosedExprStringLiteralExpr", 585).put("ConditionalExprBinaryExpr", 586).put("VariableDeclaratorConditionalExpr", 587).put("MethodDeclarationBlockStmt", 588).put("ForEachStmtArrayCreationExpr", 589).put("SynchronizedStmtBlockStmt", 590).put("VariableDeclarationExprSingleMemberAnnotationExpr", 591).put("ForStmtSynchronizedStmt", 592).put("SingleMemberAnnotationExprNormalAnnotationExpr", 593).put("SingleMemberAnnotationExprStringLiteralExpr", 594).put("LabeledStmtForEachStmt", 595).put("ConditionalExprClassExpr", 596).put("AssertStmtInstanceOfExpr", 597).put("ConditionalExprDoubleLiteralExpr", 598).put("VariableDeclaratorLongLiteralExpr", 599).put("IfStmtBreakStmt", 600).put("ForStmtFieldAccessExpr", 601).put("CompilationUnitClassOrInterfaceDeclaration", 602).put("NormalAnnotationExprMemberValuePair", 603).put("MethodCallExprBooleanLiteralExpr", 604).put("ReturnStmtAssignExpr", 605).put("SwitchEntryFieldAccessExpr", 606).put("AssignExprFieldAccessExpr", 607).put("DoStmtForStmt", 608).put("ForStmtExpressionStmt", 609).put("MemberValuePairBooleanLiteralExpr", 610).put("AssertStmtArrayAccessExpr", 611).put("FieldAccessExprObjectCreationExpr", 612).put("CatchClauseParameter", 613).put("MethodDeclarationMarkerAnnotationExpr", 614).put("DoStmtAssignExpr", 615).put("MethodCallExprArrayCreationExpr", 616).put("ReturnStmtCastExpr", 617).put("ClassOrInterfaceDeclarationSingleMemberAnnotationExpr", 618).put("ExplicitConstructorInvocationStmtThisExpr", 619).put("ParameterArrayType", 620).put("IfStmtMethodCallExpr", 621).put("SynchronizedStmtAssignExpr", 622).put("DoStmtFieldAccessExpr", 623).put("MethodCallExprEnclosedExpr", 624).put("SwitchEntryExpressionStmt", 625).put("BinaryExprBooleanLiteralExpr", 626).put("ArrayInitializerExprEnclosedExpr", 627).put("ForStmtBinaryExpr", 628).put("VariableDeclaratorClassExpr", 629).put("CastExprMethodCallExpr", 630).put("SuperExprName", 631).put("ThisExprName", 632).put("ContinueStmtSimpleName", 633).put("ClassOrInterfaceDeclarationInitializerDeclaration", 634).put("UnaryExprArrayAccessExpr", 635).put("AssignExprCharLiteralExpr", 636).put("ConditionalExprAssignExpr", 637).put("ForEachStmtBlockStmt", 638).put("MethodCallExprNameExpr", 639).put("ExplicitConstructorInvocationStmtConditionalExpr", 640).put("BinaryExprIntegerLiteralExpr", 641).put("ConditionalExprObjectCreationExpr", 642).put("MemberValuePairCharLiteralExpr", 643).put("SwitchEntryLocalClassDeclarationStmt", 644).put("SingleMemberAnnotationExprFieldAccessExpr", 645).put("ForStmtNameExpr", 646).put("ExplicitConstructorInvocationStmtStringLiteralExpr", 647).put("WhileStmtForEachStmt", 648).put("SynchronizedStmtThisExpr", 649).put("ArrayTypePrimitiveType", 650).put("ForStmtEnclosedExpr", 651).put("ExplicitConstructorInvocationStmtLongLiteralExpr", 652).put("ExplicitConstructorInvocationStmtClassExpr", 653).put("SingleMemberAnnotationExprBooleanLiteralExpr", 654).put("ObjectCreationExprBinaryExpr", 655).put("VariableDeclaratorStringLiteralExpr", 656).put("ReturnStmtCharLiteralExpr", 657).put("EnclosedExprNameExpr", 658).put("ForEachStmtFieldAccessExpr", 659).put("BinaryExprMethodCallExpr", 660).put("ArrayInitializerExprBooleanLiteralExpr", 661).put("SwitchStmtMethodCallExpr", 662).put("VariableDeclaratorEnclosedExpr", 663).put("ObjectCreationExprStringLiteralExpr", 664).put("LabeledStmtTryStmt", 665).put("ExplicitConstructorInvocationStmtObjectCreationExpr", 666).put("ArrayInitializerExprIntegerLiteralExpr", 667).put("ClassOrInterfaceDeclarationMethodDeclaration", 668).put("AssignExprClassExpr", 669).put("MethodCallExprClassExpr", 670).put("ObjectCreationExprEnclosedExpr", 671).put("FieldDeclarationMarkerAnnotationExpr", 672).build();
}
